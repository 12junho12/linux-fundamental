Container

Namespace
 Mount Point
 Process
 Network - IPC
 UTS
 User


CGroup
 CPU
 Memory
 Network I/O
 Disk I/O


Kubernetes
  조타수, 파일럿을 의미하는 그리스어에서 유래함
  줄임말로 K8s로 부르기도 함 
  구글 내부의 Borg 프로젝트에서 시작하여 Linux Foundation의 CNCF에 Kubernetes라는 이름으로 기증하여 여러 Vendor사와 공동 개발하고 있음

Kubernetes에서 제공하는 기능
 - Container Platform
 - Microservice Platform
 - 이식성 있는 Cloud Plaform

Kubernetes에서 제공하지 않는 기능
 - CI/CD (Continuous Integration/Continuous Delivery) 파이프라인 미 제공
 - 애플리케이션 레벨의 서비스 미 제공
    (미들웨어, 빅데이터, 데이터베이스, 클러스터 스토리지 등)
 - 로깅, 모니터링, 경고 솔루션 미제공


Kubernetes Architecture
 - Kubernetes Cluster의 구성요소에는 Control Plane, Nodes, Add-on

 - 참고 이미지 : https://d33wubrfki0l68.cloudfront.net/2475489eaf20163ec0f54ddc1d92aa8d4c87c96b/e7c81/images/docs/components-of-kubernetes.svg

Control Plane
 - Kubernetes Cluster 전체를 제어함
 - Kubernetes Cluster의 전반적인 결정을 수행하고 Cluster의 이벤트를 감지하고 이에 대해 대응함

 API 서버(kube-apiserver)
 - Kubernetes Cluster의 모든 구성요소들이 Control Plane에 위치하는 API Server와 메시지를 주고 받음

 키-값 저장소(etcd)
 - Kubernetes Cluster의 모든 정보를 저장하는 데이터베이스로 일관성과 고가용성을 지원하는 키-값 저장소

 Kubernetes Scheduler(kube-scheduler)
 - 새로 생성되는 파드(Pod)를 감지하고 적절한 노드에 배정하는 역할 수행

 Kubernetes Controller Manager(kube-controller-manager)
 - Controller는 API Server를 통해 Cluster의 상태를 감시하고 필요한 상태로 이행하는 기능을 수행
 - Control Manager는 Controller를 담당하는 Control Plane의 구성요소임

 Kubernetes Controller Manager 종류
 - Node Controller : Node를 관히하며 만약 Node가 다운되는 경우 알림 및 대응을 수행함
 - Replication Controller : Replication Controller를 사용하는 모든 Object를 관리하며 적정 수준의 Pod를 유지하는 기능을 담당함
 - Endpoint Controller : Service와 Pod를 연결함
 - Service Account, Token Controller : Kubernetes의 Namespace, 계정, Token을 담당함

 Cloud Controller 
 - Cloud를 제공하는 업체의 기능과 Cloud에서 동작하는 Kubernetes 구성요소와 상호작용을 할 수 있도록하는 Controller


Node
 - Kubernetes Cluster에서 컨테이너의 런타임 실행환경을 제공하고 동작중인 파드(Pod)를 유지하는 기능을 담당함

 kubelet
  - 각 노드에서 실행되는 에이전트로서 Control Plane으로부터 제공받은 파드(Pod)의 구성 정보를 받아서 컨테이너가 정확하게 동작하는 것을 관리하고 보장하는 역할을 수행함

 Kubernetes Proxy(kube-proxy)
  - Host 레벨의 네트워크 규칙을 구성하고 외부 연결을 파드에 포워딩을 담당함

 Container Runtime
  - 컨테이너의 동작을 책임지는 구성요소
   - Docker
   - containerd
   - CRI-O
   - 그외 Kubernetes CRI(Container Runtime Interface)를 구현한 모든 런타임


Add-on
 - Kubernetes Cluster에 추가할 수 있는 확장 기능을 제공

Kubernetes Cluster의 Add-on 주요 구성 요소
 - Cluster DNS
   - Kubernetes Cluster 내의 여러 오브젝트(Pod, Container, Service 등)에 대한 DNS 레코드를 제동하여 주소 기반으로 오브젝트를 찾을 수 있도록 지원
 - Dashboard
   - Kubernetes Cluster를 관리하기 위한 Web 기반의 Dashboard
 - Container Resource Monitoring
   - 컨테이너에 대한 Resource 사용량에 대한 모니터링 기능 제공
 - Cluster Logging
   - 컨테이너 로그를 로그 저장소에 저장하고 관리하는 기능 제공


Kubernetes API
 - Kubernetes의 모든 구성요소는 API 서버와 메시지를 주고 받음
 - API 버전 표기법   ( /api/v1  ,  /apis/extensions/v1beta1 )

Kubernetes API 버전 종류
 Alpha Version API
 - 버전 이름에 alpha가 포함됨 (v1alpha1)
 - 버그가 있을 수 있으며 기능 활성화시 버그에 노출될 수 있음
 - 기본적으로는 비활성화됨
 - 기능에 대한 기술지원이 언제든지 공지 없이 중단될 수 있음
 - 다음 릴리즈에서 공지 없이 API 호환성이 깨지는 방식으로 변경될 수 있음

 Beta Version API
 - 버전 이름에 beta가 포함됨 (v1beta1)
 - 코드가 잘 테스트 되고 이 기능을 활성화 해도 안전함
 - 세부적인 내용이 변경될 수 있으나 전반적인 기술지원이 중단되지 않음
 - 다음 릴리즈에서 API 호환성이 깨지는 방식으로 변경될 수 있지만 이전할 수 있는 가이드를 제공함
 - API 변경시 기존 리소스에 대한 삭제 및 재생성이 필요할 수 있으며 이 때 다운타임이 발생할 여지가 있음
 - 다음 릴리즈에서 호환되지 않을 수 있으므로 중요하지 않은 용도로 사용을 권장함

 Stable Version API
 - 버전 이름이 vX 형태로 정의됨
 - Stable Version의 기능은 이후에 소프트웨어 릴리즈에 포함됨

Kubernetes API 그룹
 - Kubernetes에서 기능을 추가할 때 해당 기능을 사용하기 위한 API를 더 쉽게 확장할 수 있도록 도와줌

 - Core 그룹
    YAML -    apiVersion: [VERSION]
    HTTP REST API -    /api/[VERSION]
 - Core 이외의 그룹
    YAML -    apiVersion: [GROUP]/[VERSION]
    HTTP REST API -    /api/[GROUP]/[VERSION]

-------
Kubernetes Cluster 구성  
    (vagrant를 이용한 VM 환경 구성)

vagrant  /  vagrant

<Docker CE 설치> -- 모든 VM
추가 Repository 구성을 위한 패키지 설치
sudo apt-get update
sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release -y

Docker 추가 Repository 구성(gpgkey keyring 설치, Repository 추가)
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo \
  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

Docker 패키지 설치
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io -y


<kubeadm, kubelet, kubectl 설치> -- 모든 VM
Docker 추가 Repository 구성(gpgkey keyring 설치, Repository 추가)
sudo curl -fssL https://packages.cloud.google.com/apt/doc/apt-key.gpg -o /usr/share/keyrings/kubernetes-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

kubeadm, kubelet, kubectl 설치(버전 지정 및 고정)
sudo apt-get update
sudo apt-get install -y kubelet=1.19.11-00 kubeadm=1.19.11-00 kubectl=1.19.11-00

sudo apt-mark hold kubelet kubeadm kubectl

<Kubernetes Control-Plane 초기화> -- kube-control1
Kubernetes Cluster 생성
sudo kubeadm init --control-plane-endpoint 192.168.200.11 --pod-network-cidr 192.168.0.0/16 --apiserver-advertise-address 192.168.200.11

kubectl 명령어 구성 
mkdir ~/.kube
sudo cp -i /etc/kubernetes/admin.conf ~/.kube/config
sudo chown vagrant:vagrant ~/.kube/config

Container Network Add-on Calico 설치
kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml


<Kubernetes Cluster에 Nodes 가입> -- 가입하고자 하는 Nodes VM
sudo sudo kubeadm join <control-plane-host>:<control-plane-port> --token <token> --discovery-token-ca-cert-hash sha256:<hash>


