Kubernetes 

kubectl  COMMAND  RESOURCE_TYPE  [NAME] [OPTION]

파드 목록 확인
kubectl get pods

파드 목록 자세히 확인
kubectl get pods -o wide


Kubernetes 오브젝트 관리
 명령형 커맨드
  - kubectl 명령어에 인수나 옵션을 사용하여 애플리케이션을 제어
  - 별도의 Manifest 파일을 사용하지 않음
  - 간단한 테스트 목적으로 실행하고자 할 때 주로 사용하는 오브젝트를 관리하는 단순한 방법
  kubectl run busybox --image busybox

 명령형 오브젝트 구성
   - 오브젝트를 별도로 YAML이나 JSON 형식으로 정의
   - kubectl 명령어에 개별 Manifest 파일을 인수로 지정하여 오브젝트를 관리함
   - 관리하고자하는 오브젝트에 대한 완전한 정의를 포함해야함
   kubectl create -f MANIFEST.yaml
   kubectl delete -f MANIFEST.yaml

 선언형 오브젝트 구성
   - 특정 디렉터리에 모든 오브젝트에 대한 정의 파일을 배치함
   - kubectl 명령어에 특정 디렉터리를 인수로 지정하여 오브젝트를 관리함
   - 관리하고자 하는 모든 오브젝트에 대한 완전한 정의를 포함해야함
   kubectl create -R -f apps/

-----
Kubernetes Cluster에 metallb 설치

metallb namespace 구성
kubectl create -f https://raw.githubusercontent.com/metallb/metallb/v0.10.2/manifests/namespace.yam
metallb 설치
kubectl create -f https://raw.githubusercontent.com/metallb/metallb/v0.10.2/manifests/metallb.yaml

vi metallb-config.yaml
=====
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: metallb-system
  name: config
data:
  config: |
    address-pools:
    - name: default
      protocol: layer2
      addresses:
      - 192.168.200.200-192.168.200.210
=====

metallb 구성 적용
kubectl create -f metallb-config.yaml

metallb 설치 확인
kubectl get pods -n metallb-system

------
파드(Pod)
 Kubernetes Cluster에서 애플리케이션을 실행하고 배포하는 가장 작은 단위

파드 생성
 kubectl run example-pod --image IMAGE 

파드 삭제
 kubectl delete -f POD.yaml

특정 파드의 상세한 정보 확인
 kubectl describe pods POD

특정 파드의 로그 확인
 kubectl logs POD

특정 파드 Manifest 정보 확인
 kubectl get pod POD -o yaml


=====
apiVersion: v1
kind: Pod
metadata:
  name: example-pod2
spec:
  containers:
  - image: devops2341/go-myweb:latest
    name: example-c1
    ports:
    - containerPort: 8080
      protocol: TCP
=====
-----
레이블(Label)
 Kubernetes Cluster에 있는 모든 Object에 대해 key/value 쌍으로 리소슬르 식별하고 속성을 지정할 때 사용
 오브젝트의 분류, 용도 등의 속성을 메모
 오브젝트에 지정한 레이블에 따라 오브젝트를 제어할 수 있음

 env: develop / env: production 
 app: docs / app: apply-app
 department: company / department: operation

Pod 목록 확인(Label 표시)
kubectl get pods --show-labels

레이블 지정
kubectl label pods POD LABEL
kubectl label pods POD label_key=label_value
kubectl label pods POD department=devel

레이블 변경
kubectl label pods POD LABEL --overwrite
kubectl label pods POD label_key=label_value --overwrite


레이블 셀렉터
  오브젝트에 부여된 레이블을 식별하고 검색할 수 있음
  검색 방법
    - 특정 키가 있는/없는 레이블
    - 특정 키와 값이 있는/없는 레이블
   연산자
     =
     ==
     !=
     in
     notin

tier 키가 포함된 레이블 지정
kubectl get pods --show-labels -l 'tier'

tier 키가 없는 레이블 지정
kubectl get pods --show-labels -l '!tier'

env 키에 develop 값이 있는 레이블 지정
kubectl get pods --show-labels -l 'env=develop'

env 키의 값이 develop 가 아닌 레이블 지정
kubectl get pods --show-labels -l 'env!=develop'

env 키의 값이 develop 혹은 dev 인 레이블 지정
kubectl get pods --show-labels -l 'env in (develop,dev)'

env 키를 가지지만 frontend 값이 없는 레이블 지정
kubectl get pods --show-labels -l 'env notin (frontend)'

---
어노테이션(Annotation)
  오브젝트에 비식별 메타데이터를 지정
  레이블과 같이 레이블 셀렉터로 검색할 수 없음
  선언적 구성정보, 타임스탬프, 이미지 해시, 레지스트리 주소, 디버깅 정보, 관리자 정보 등의 메타데이터를 기록하는데 사용함

Annotation 지정(명령어)
kubectl annotate pods POD ANNOTATION

Annotation 지정(YAML)
vim pod-annotation.yaml
=====
...
metadata:
  name: POD_NAME
  annotations:
    ANNOTATION: ABCD
...
=====

Annotation 확인 (annotations 에서 확인)
kubectl describe pod POD

-----
네임스페이스(Namespace)
  Kubernetes Cluster에 대한 논리적인 격리를 제공하는 논리적인 파티션

네임스페이스 목록 확인
kubectl get namespaces
 default : Kubernetes Cluster의 기본 namespace로 별도로 namespace를 지정하지 않는 경우 사용하는 기본 namespace
 kube-system : Kubernetes System에서 생성한 namespace

네임스페이스 생성(명령어)
kubectl create namespace NAMESPACE

네임스페이스 생성(YAML)

vim NAMESPACE.yaml
=====
apiVersion: v1
kind: Namespace
metadata:
  name: NAMESPACE
=====

kubectl create -f NAMESPACE.yaml


네임스페이스 지정하여 오브젝트 목록 확인
kubectl get pods -n NAMESPACE

네임스페이스 제거
kubectl delete namespace NAMESPACE

-----
파드(Pod)의 생명주기 및 프로브

파드의 생명주기
 Pending -> Running -> Succeeded  or  Failed


파드의 생명주기 단계
 - Pending
     파드가 클러스터에서 승인되었으나 아직 실행되지 않은 상태
     Pod가 스케쥴링 되기 이전
 - Running
     파드가 노드에 할당되어 실행중인 상태
     하나이상의 컨테이너가 실행중

 - Succeeded
     모든 컨테이너가 정상적으로 종료가 된 상태

 - Failed
     모든 컨테이너가 종료된 상태
     하나 이상의 컨테이너가 실패로 종료됨

 - Unknown
    알수없는 상태
    일반적으로 노드의 통신 오류가 발생한 경우

컨테이너의 상태
 - Waiting
    컨테이너가 Running 또는 Terminated 상태가 아닌 경우
 - Running
    실행된 상태(실행 시작 시간 표시)
 - Terminated
    컨테이너 실행이 완료된 상태
    
컨테이너 재시작 정책(restartPolicy)
  Always : (기본값) 종료/실패시 항상 재시작
  Onfailure : 실패시 재시작
  Never : 재시작하지 않음


컨테이너 프로브(Container Probe)
 컨테이너의 동작 상태를 감시
 kubelet이 Probe Handler를 호출함

Probe Handler의 컨테이너 진단 방식
 - HTTPGetAction : 특정 경로의 리소스를 요청하여 컨테이너 상태 진단
 - TCPSocketAction : 특정 TCP Port에 연결을 시도하여 포트 활성화 여부를 확인
 - ExecAction : 컨테이너 내의 특정 바이너리를 실행하여 정상 종료 여부를 확인

ProbeHandler 상태
 - Success : 진단 통과
 - Failure : 진단 결과가 실패
 - Unknown : 진단 시도 실패

컨테이너 프로브 종류(Container Probe Types)
 - livenessProbe
    - 컨테이너가 동작중인지를 계속 확인
    - 진단에 실패하면 재시작 정책을 적용함

 - readinessProbe
    - 컨테이너가 요청을 처리할 준비가 되었는지 확인
    - 진단에 실패하면 엔드포인트 컨트롤러가 파드의 IP주소를 엔드포인트에서 제거함

 - startupProbe
    - 컨테이너 내의 애플리케이션이 시작되었는지 확인
    - startupProbe가 선언된 경우 통과하기 전까지 다른 Probe를 활성화하지 않음

Containers의 Liveness 필드 의미
 - delay
   - Probe 실행 전 지연시간
   - 기본 값 : 0초

 - timeout
   - Probe의 timeout
   - 기본 값 : 1초

 - period
   - Probe의 주기
   - 기본 값 : 10초

 - success
   - Probe 성공 임계값
   - 기본 값 : 1

 - failure
   - Probe 실패 임계값
   - 기본값 : 3 (3번 연속 진단 실패시 최종 실패로 판단함)




































