Kubernetes 스토리지

Volume
 파드 및 컨테이너에 저장공간을 제공하는 Kubernetes 오브젝트

Volume 종류
 - emptyDir
 - gitRepo
 - hostPath
 - 네트워크 기반 스토리지 볼륨
   NFS, iSCSI, Ceph, Cinder, Glusterfs 등
 - 클라우드 스토리지 볼륨
   awsElasticBlockStore, azureDisk, azureFile, gcePersistentDisk 등

PersistentVolume(PV)
 - Kubernetes Cluster에서 외부 스토리지와의 연결을 담당하는 오브젝트
 - PV와 PVC는 1:1로 연결될 수 있음

PersistentVolumeClaim(PVC)
 - 사용자가 파드(Pod)에 스토리지를 연결하기 위한 오브젝트로 저장공간을 요청함
 - 파드(Pod)에서 연결할 볼륨 이름과 PVC 지정하여 파드(Pod)와 연결함

emptyDir 볼륨
 - 파드(Pod)에 빈 디렉터리를 제공하는 Kubernetes 볼륨
 - 파드 내의 컨테이너 끼리의 임시 데이터 공유에 활용
 - 파드 삭제시 볼륨도 함께 삭제되므로 파드 동작 중에만 데이터가 보존됨

gitRepo 볼륨 (Deprecated)

초기화 컨테이너(initContainers)
 - 파드의 애플리케이션을 시작하기 전 초기화 할 내용을 담고 있는 컨테이너로 파드 생성시 애플리케이션이 담긴 컨테이너보다 먼저 실행되는 컨테이너

hostPath
 - Kubernetes 노드(호스트) 로컬 파일시스템의 특정 경로를 파드(Pod)가 사용할 수 있도록 제공하는 볼륨
 - 호스트(노드)에 종속적인 볼륨이며 노드가 다른 경우 기본적으로 데이터는 공유되지 않음
 - 파드(Pod) 종료 이후에도 데이터가 유지됨

type 항목
 - DirectoryOrCreate :  지정한 디렉터리 사용 (해당 디렉터리가 없으면 생성)
 - Directory :  지정한 디렉터리 사용 (해당 디렉터리가 존재해야함)
 - FileOrCreate :  지정한 파일 사용 (해당 파일이 없으면 생성)
 - File :  지정한 파일 사용 (해당 파일이 존재해야함)
 - Socket :  지정한 소켓 사용 (해당 소켓이 존재해야함)
 - CharDevice :  지정한 Character Device 사용 (해당 장치가 존재해야함)
 - BlockDevice :  지정한 Block Device 사용 (해당 장치가 존재해야함)


PersistentVolume, PersistentVolumeClaim

 PV 및 PVC Life Cycle
  (1) Provisioning - PV 생성 단계
  (2) Binding - PVC와 미리 준비된 PV가 연결되는 단계
  (3) Using - PVC가 Pod에 연결(mount)되어 사용되는 단계
  (4) Reclaiming - 사용을 마친 PVC 종료/삭제 시 연결된 PV를 회수하는 단계

회수 정책(Reclaiming Policy)
 - 유지(Retain)
   - PV 리소스를 그대로 유지하는 정책
   - PVC와 연결이 끊겨도 다른 PVC와 연결될 수 없음
 - 삭제(Delete)
   - PVC 삭제시 연결된 PV도 같이 삭제되는 정책
   - PV가 같이 삭제되면서 외부 스토리지에 저장된 데이터도 같이 삭제됨
 - 재활용(Recycle)
   - 스토리지의 데이터가 삭제되고 다른 PVC가 PV를 사용할 수 있도록 하는 정책
   - 현재 지원되는 스토리지는 NFS, hostPath 볼륨만 지원 가능함
   - 스토리지 종류마다의 구현이 복잡하여 향후 제거될 예정


Static Volume Provisioning

accessModes
 - ReadWriteOnce : 한번에 하나의 파드만 Read, Write가 가능함
 - ReadWriteMany : 복수의 파드가 Read, Write
 - ReadOnlyMany : 복수의 파드가 Read 가능함

Retain Policy
  Retain
  Delete
  Recycle

Persistent Volume 목록 확인
 kubectl get persistentvolumes
====
NAME           CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE
myapp-pv-nfs   3Gi        RWX            Retain           Available                                   15s

 * PersistentVolume Status
  - Available : PV가 생성된 이후 다른 PVC에 연결되지 않은 상태. Available 상태에서만 PVC에 연결될 수 있음
  - Bound :  PVC와 연결된 상태
  - Released :  PVC와 연결이 해제되었으며 리소스를 회수하지 않은 상태
  - Failed :  회수 실패

Persistent Volume Claim 목록 확인
 kubectl get persistentvolumeclaims
NAME            STATUS   VOLUME         CAPACITY   ACCESS MODES   STORAGECLASS   AGE
myapp-pvc-nfs   Bound    myapp-pv-nfs   3Gi        RWX                           19s

NFS를 이용한 정적 프로비저닝

1. NFS 스토리지 구성(kube-control1)
 sudo apt-get install nfs-kernel-server -y
 vim /etc/exports
 ============
 /EXPORT_DIR   TARGET(option)
 ============
 mkdir /EXPORT_DIR
 sudo chown -R nobody:nogroup DIR
 sudo chmod -R 777 DIR
 sudo systemctl restart nfs-kernel-server
 sudo iptables -A INPUT -p tcp --dport 2049 -j ACCEPT
 sudo iptables -A INPUT -p udp --dport 2049 -j ACCEPT
2. NFS Client 구성(kube-node1 ~ kube-node3)
 sudo apt-get install nfs-common -y

3. PersistentVolume 생성(kube-control1)
vim PV.yaml
kubectl create -f PV.yaml
kubectl get persistentvolumes
kubectl describe persistentvolumes PV

4. PersistentVolumeClaim 생성(kube-control1)

vim PVC.yaml
kubectl create -f PVC.yaml
kubectl get persistentvolumeclaims
kubectl describe persistentvolumeclaims PVC

5. PersistentVolumeClaim을 사용할 파드/컨트롤러 생성(kube-control1)

vim POD.yaml
kubectl create -f POD.yaml


Dynamic Volume Provisioning

----
<rook ceph Cluster 설치>

비어 있는 디스크 사전에 준비

git clone --single-branch --branch release-1.6 https://github.com/rook/rook
cd ~/rook/cluster/examples/kubernetes/ceph

rook operator 설치
kubectl create -f crds.yaml -f common.yaml -f operator.yaml
kubectl get pod -n rook-ceph

rook-ceph Cluster 설치
kubectl create -f cluster.yaml
kubectl get pods -n rook-ceph

RBD StorageClass 생성
kubectl create -f csi/rbd/storageclass.yaml

RBD StorageClass 확인
kubectl get storageclasses.storage.k8s.io

CephFS Filesystem 설치
Data Pool 생성
kubectl create -f filesystem.yaml

CephFS Filesystem 확인
kubectl get pods -n rook-ceph -l app=rook-ceph-mds

CephFS 스토리지 클래스 생성
kubectl create -f csi/cephfs/storageclass.yaml


기본 StorageClass 지정
StorageClass 목록 확인
kubectl get storageclasses.storage.k8s.io

기본 StorageClass 설정
kubectl patch storageclasses.storage.k8s.io rook-ceph-block \
-p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'

StorageClass 목록 확인
kubectl get storageclasses.storage.k8s.io
----

------
Application Customizing

 Container Application Customizing
 Container Image Customizing
 Environment Variable
 Configmap
 Secret

Container Image Customizing
 Container Image에 Argument 전달










