복습 개념 정리
온프레미스 / 전통적인 / 레거시 
	=> 클라우드 서비스와 대비되는 방식
	물리적인 서버를 이용해서 사용자들에게 서비스를 제공

한계점(단점) : 초기 구성 비용/시간이 많이 든다.
	네트워크/시스템/개발 각 분야에 대한 전문지식 필요
	H/W 기술의 발전으로 인한 리소스 낭비가 심해짐
=> 가상화 기술을 도입

가상화: 물리적인 리소스를 논리적으로 분할/ 통합하는 방식
	스토리지 / 네트워크 / 시스템 등에 가상화 기술 사용
=> 초기 구성 시간은 더 증가. 비용은 약간 감소

클라우드 서비스: 공급업체에서 이미 구비해둔 시스템으로 리소스 제공
	공급업체 - 비용 낭비를 줄일 수 있음
	사용자 - 초기 구성 비용/시간이 없어진다.

특징: 사용자가 원하는 대로 서비스를 제공하는 방식(온디맨드)
	인터넷(네트워크)만 사용 가능하면 서비스 이용
단점: 사용 기간이 길어지거나 리소스를 많이 사용하면 비용이 증가

퍼블릭 클라우드/프라이빗 클라우드/ 하이브리드 클라우드

오픈스택: 프라이빗 클라우드 구성(IaaS)
오픈스택 서비스
-keystone: 사용자에 대한 인증 / 권한확인 등의 작업
	도메인/프로젝트/사용자/그룹/역할/리소스 등을 관리
	도메인- 하나의 독립적인 환경 (v3에서 사용)
	프로젝트 - 사용자의 접근제어 및 리소스 할당량 조절 가능
	사용자 - 인증 및 접근제어 개체(v3에서 사용)

-Glance: 이미지를 관리
	이미지 -> 인스턴스(가상머신)를 실행하기 위한 디스크 파일
	이미지의 메타데이터를 읽어와서 검색/관리/사용 기능 제공
	로컬 스토리지(컨트롤러)에 저장 / Swift 스토리지에 저장
	Glance<->Swift: 이미지 파일 저장/불러오기
	Nova<->Glance: 인스턴스 생성 및 저장

사용자 -> 인스턴스 생성 작업 실행
	1) Horizon 서비스를 통해서 / 명령어로 작업 지시
	2) Keystone 서비스를 통해서 사용자 인증 및 토큰 발행
	3) 이미지를 요청(Glance-API)
	4) 백앤드 스토리지에서 이미지 파일 가져오기

주의사항: 이미지의 사이즈가 속도에 영향을 미치므로 사이즈 최소화


-Nova: 인스턴스를 관리: 인스턴스를 관리 (스케줄링 / 생성 / 삭제 / 동작제어)
	Controller / Compute 노드 모두 설치 / 동작
	nova-conductor: DB와 compute 서비스의 중재자 역할
+Placement: 인스턴스가 생성 가능한 노드를 확인
	nova-api: 사용자의 요청을 받는 프론트앤드 서비스
	nova-scheduler: 인스턴스를 어떤 노드에서 실행할 지 결정	
	nova-compute: QEMU/KVM, libvirt와 연동작업
		-> 인스턴스 생성 / 삭제 작업
		요청을 받아서 libvirtd에 전달
		컴퓨트노드에서 설치 및 동작
	nova-novncproxy: VNC 프로토콜 지원 -> 웹에서 콘솔사용
	nova-console: 콘솔화면 접속 제공
	nova-consoleauth: 콘솔화면 접속 제공



	

-Horizon: 대시보드 제공
	사용자들이 오픈스택의 리소스들을 관리할 수 있는 인터페이스를 제공

-Neutron: 네트워크를 관리
	내부 네트워크: 인스턴스의 연결 구성
	외부 네트워크: 물리적인 네트워크와의 연결 구성
	라우터: 내부/ 외부 네트워크를 연결
	보안그룹: 인스턴스에 대한 네트워크 접근 제어

-Cinder: 블록 스토리지 관리
-Swift: 오브젝트 스토리지 관리
-Heat: 리소스를 동적으로 관리
-Ceilometer: 리소스 사용량을 측정
