가상화와 클라우드

가상화
- 물리적인 장치 구성에 대한 부분을 논리적으로 구성하는 기술
- 서버 / 스토리지 / 네트워크 등을 가상화
- 1960 년대 최초로 가상화 개념 언급 (관심X)
	-> IBM 하드웨어 파티셔닝
- H/W 기술이 발전하면서 관심이 증대

최초 - 운영체제 및 간단한 어플리케이션
기술발전 후 - 어플리케이션 개수 증가 (리소스 낭비 감소)
	=> 시스템 과부하 , 장애 발생 , 보안
가상화 사용 - 어플리케이션을 격리환경에서 동작
	-> 시스템 가상화

운영체제의 역할 - 시스템의 물리적인 리소스를 관리하고
		어플리케이션의 리소스 접근/사용을 도움

시스템 가상화에서 HV 의 역할
- 가상머신 마다 운영체체/어플리케이션 이 동작
- 각 운영체제(게스트OS) 의 직접적인 접근을 차단 (트랩)
- 가상머신 내부의 요청에 대해서 실제 운영체제(호스트OS)에
  변환 및 재요청 해주는 작업 (에뮬레이터)
- 가상머신 간의 격리 기능 제공

하이퍼바이저 종류
- VirtualBox , VMware Workstation , KVM 등.

가상화 종류
- 네트워크 가상화
	네트워크 장비 / 기능을 논리적으로 구현
	장비 - SDN (Software Define Network)
	기능 - NFV (Network Fuction Virtualization)
- 스토리지 가상화
	스토리지를 논리적으로 분할/합쳐서 사용하는 기술
	SDS ( Software Define Storage )
	LVM , RAID , Gluster , Ceph ...
- 시스템 가상화
	시스템(서버)를 논리적으로 분할해서 사용하는 기술
	-> VM 등을 만들어서 사용하는 기술
	호스트 가상화
	하이퍼바이저 가상화 (서버가상화)
	컨테이너 가상화 -> 도커/쿠버네티스

호스트 가상화
- 운영체제 설치 후, 하이퍼바이저 소프트웨어를 설치하는 방식
- 장점 : 관리 및 사용하기 편하다.
- 단점 : 오버헤드가 크다. 시스템 리소스에 대한 제한.

하이퍼바이저 가상화
- 운영체제 X , HW 위에 바로 하이퍼바이저를 설치
- 장점 : 호스트 가상화 보다는 오버헤드가 줄어든다. 
	시스템 리소스에 대한 제한이 적다.
	성능 및 보안에 유리
- 단점 : 사용에 제약이 많다. (불편함)

컨테이너 가상화
- 어플리케이션만 격리하는 가상화 방식 (별도의 OS 없음)
- 장점 : 배포가 빠르고 많은 배포가 가능하다.
	오버헤드가 매우 적다.
- 단점 : OS가 따로 없다. 

전가상화 / 반가상화		- 가상화 분류
type1 / type2		- 하이퍼바이저 분류

오픈스택 - 클라우드 컴퓨팅의 일종

클라우드 컴퓨팅
- 사용자의 요청에 따라 공유된 컴퓨터의 자원/데이터를 제공
- 온디맨드 방식
- 인터넷(네트워크)만 되면 어디서든 요청

클라우드 서비스 모델
- SaaS (Software as a Service)
	사용자가 특정 어플리케이션을 그대로 사용
	ex. 구글문서 
- PaaS (Platform as a Service)
	개발자가 플랫폼에서 어플리케이션 개발/테스트
	운영체제까지 구성해서 제공하는 방식
- IaaS (Infrastructure as a Service)
	사용자에게 리소스를 제공(cpu/ram/disk)
	직접 시스템을 만들어서 사용하는 방식

클라우드 서비스 종류
- Public Cloude  : AWS, AZURE, GCP 등
		사용자가 관리X, 비용 지불 후 사용.
		관리 범위가 작다. (편의성)
		보안 구성 ( 공급업체에서 담당 )
- Private Cloude : 오픈스택 등
		직접 관리해야 해서 복잡하고 힘들다.
		초기 구축 비용이 많이 든다.
		유지 비용이 절감.
		보안 위험 및 어려움
- Hybrid Cloude : 두 가지를 혼합한 방식

오픈스택 -> IaaS / Private  방식의 클라우드 환경
관리 방식 : dashboard (그래픽환경)
	 openstack (명령어)
	 REST API 

가상머신 = 게스트머신 = 인스턴스 = 서버
이미지 : 부팅 가능한 운영체제가 설치된 디스크 파일

핵심 서비스
Keystone : 사용자 인증
Nova	: 인스턴스를 생성/관리
Glance	: 이미지 관리
Horizon	: 대시보드(웹 인터페이스) 관리 방법 제공
Swift	: 오브젝트 스토리지 관리 서비스
Cinder	: 블록 스토리지 관리 서비스 (디스크)
Neutron	: 네트워크 관리 서비스
Heat	: 오케스트레이션 서비스 (리소스 관리)
Ceilometer : 데이터 미터링 서비스
	-> gnocchi , panko , aodh 로 세분화 됨.

	allinone.osp.exam.com
설치 작업
1. 가상머신 준비
	1) RAM - 8G 이상 (16G)
	2) CPU - 4core (8core)
	3) DISK - 100G 이상 (150G)
	4) OS - CentOS7 이상 (Ubuntu 16이상)
	5) 기능 - CPU가상화, NIC 무작위모드
2. 운영체제 설치
	1) Network 설정 (정적IP , 호스트네임)
	2) NTP 설정 (시간동기화)
	3) 디스크 파티셔닝 (권장사항에 맞게) -> root에 전체
3. 초기 구성
	1) /etc/hosts 파일에 주소 등록
	2) NM , firewalld 서비스를 비활성화
	3) network , chronyd 서비스 활성화
4. 설치
	1) yum update 로 커널/패키지 최신 버전으로 업
	2) 재부팅
	3) centos-release-openstack-XXXX (stein)
	4) 추가 업데이트 
	5) openstack-packstack , openstack-selinux
	6) packstack 실행
	-> 실행 시 answer-file 사용
	default / admin 패스워드
	각종 서비스 설치 유무
	Neutron 서비스 설정
	( openvswitch -> ovs  /  ovn -> ovn )
		-> 외부 및 터널 브릿지에 대한 설정
	+@ Swift 서비스 (파일시스템)
	+@ 시스템 IP 주소

# vim /etc/hosts		-> 이름/IP 등록
# systemctl disable NetworkManager firewalld
# systemctl enable network chronyd
# yum update -y ; reboot
# yum install centos-release-openstack-stein.noarch -y
# yum update -y 
# yum install openstack-packstack openstack-selinux
# packstack --gen-answer-file=answers.txt
# vim answers.txt			-> 수정
# packstack --answer-file=answers.txt

수정 내용
CONFIG_DEFAULT_PASSWORD=1234
CONFIG_HEAT_INSTALL=y
CONFIG_NTP_SERVERS=kr.pool.ntp.org
CONFIG_KEYSTONE_ADMIN_PW=1234
CONFIG_LBAAS_INSTALL=y
CONFIG_NEUTRON_ML2_MECHANISM_DRIVERS=openvswitch
CONFIG_NEUTRON_L2_AGENT=openvswitch
CONFIG_NEUTRON_OVS_BRIDGE_MAPPINGS=extnet:br-ex
CONFIG_NEUTRON_OVS_BRIDGE_IFACES=br-ex:enp0s3
CONFIG_NEUTRON_OVS_TUNNEL_IF=enp0s8
CONFIG_NEUTRON_OVS_TUNNEL_SUBNETS=192.168.56.0/24
CONFIG_SWIFT_STORAGE_FSTYPE=xfs
CONFIG_PROVISION_DEMO=n





