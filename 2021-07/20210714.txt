오픈스택 스토리지
임시 스토리지 - 인스턴스 생성 시 만들어지고, 인스턴스 삭제 시 제거되는 스토리지
영구 스토리지 - 인스턴스와 무관하게 생성 / 삭제 하는 스토리지 블록 / 오브젝트 / 공유

블록 스토리지(Cinder)
- 인스턴스에서 사용할 장치를 제공
- 장치를 제공하는 방식이 볼륨
- 볼륨은 영구적인 저장장치
- 한 번에 하나의 인스턴스에 연결
- 사용하던 볼륨을 다른 인스턴스에 다시 연결해서 사용 가능
- LVM 등의 방식을 이용해서 서비스 제공
- 기본 방식은 LVM이지만, 권장하지 않음

인스턴스 생성 순서
1. 사용자 작업 실행(명령어 / 대시보드) - Horizon
2. 사용자 인증을 위해 Keystone 서비스에 요청
3. 인스턴스 생성 요청 -Nova
4. 이미지를 요청 - Glance
5. 이미지와 플레이버를 통해 스케줄링 작업 -Nova
6. 인스턴스에 연결해줄 네트워크 구성 -Neutron
7. 인스턴스에 제공할 저장공간을 확인 및 할당 - Cinder

볼륨 생성 및 확인
인스턴스에 연결
데이터 저장 후 확인
인스턴스와 연결 해제 후 확인

오브젝트 스토리지(Swift)
- Swift 스토리지를 기본 사용
- API를 통해서 접근 (HTTP)
- 다양한 종류의 데이터를 저장 (구조화되지 않은 데이터 포함)
- 저장하는 데이터 개체를 오브젝트라고 한다.
- 저장시에는 메타데이터 + 바이너리
- 분산 시스템 (데이터를 복제해서 분산 저장)
	-> 수평적 확장이 쉽다. 자동 분산으로 인한 장애조치에 유리
- 내부적인 리밸런싱 기능 제공
- 최소 3개의 데이터 복제 권장 ( 3개 이상의 스토리지 및 시스템 권장 )

swift-proxy: API 요청에 대한 응답
swift-account: 사용자에 대한 접근 제어
swift-container: 요청한 오브젝트가 존재하는지 확인
swift-object: 메타데이터를 바탕으로 실제 데이터가 저장된 곳을 확인

-> 기본적으로 분산 정책을 사용해서 안정성은 높지만 효율성은 떨어짐
